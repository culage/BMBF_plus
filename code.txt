//■実コード

// ApiUtil
// ==============================
var ApiUtil = {
	CONFIG_API_URL: "/host/beatsaber/config",
	// Config取得
	async GetConfig() {
		var response = await fetch(this.CONFIG_API_URL, {
			method: 'GET',
			cache: 'no-cache',
		});
		return await response.json();
	},
	// Config反映
	async PutConfig(putJson) {
		return await fetch(this.CONFIG_API_URL, {
			method: 'PUT',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(putJson.Config)
		});
	}
};


// UI追加
// ==============================

// 曲リスト位置調整
document.querySelector(".outer-container").style.marginTop = "0px";

// ボタン追加
document.querySelector("div.title-message").innerHTML = `
  <button id="btnDigupSong">Dig up Song</button>　
  <button id="btnRefresh" onclick="location.reload();">Refresh</button>
`;


// 曲を上に移動
// ==============================
var btnDigupSong = document.querySelector("#btnDigupSong");
btnDigupSong.addEventListener("click", async function() {
	
	btnDigupSong.disabled = true;
	
	// Config取得
	var j = await ApiUtil.GetConfig();
	
	// 条件ダイアログ表示
	var digupCondition = await ShowDigupDialog();
	if (digupCondition == null) {
		btnDigupSong.disabled = false;
		return;
	}
	
	// プレイリスト未登録曲を上に移動
	var knownSongsList = Object.entries(j.Config.KnownSongs);
	
	var digupSongsList = knownSongsList.filter(entry=>true); // copy
	if (digupCondition.keyword != "") {
		var k = digupCondition.keyword.toLowerCase();
		digupSongsList = digupSongsList.filter(entry=>{
			if (entry[1].Hash.toLowerCase().includes(k) == true) { return true; }
			if (entry[1].SongName.toLowerCase().includes(k) == true) { return true; }
			if (entry[1].SongSubName.toLowerCase().includes(k) == true) { return true; }
			if (entry[1].SongAuthorName.toLowerCase().includes(k) == true) { return true; }
			if (entry[1].LevelAuthorName.toLowerCase().includes(k) == true) { return true; }
			return false;
		});
	}
	if (digupCondition.isUnlistedOnly == true) {
		var playlistHashSet = new Set( j.Config.Playlists.flatMap(playlist=>playlist.SongList.map(song=>song.Hash)) );
		digupSongsList = digupSongsList.filter(entry=>!playlistHashSet.has(entry[1].Hash));
	}
	
	var digupSongsHashSet = new Set( digupSongsList.map(entry=>entry[1].Hash) );
	var notDigupSongsList  = knownSongsList.filter(entry=>!digupSongsHashSet.has(entry[1].Hash));
	var newKnownSongs = notDigupSongsList;
	newKnownSongs.unshift(...digupSongsList);

	j.Config.KnownSongs = Object.fromEntries(newKnownSongs);

	// Config反映
	await ApiUtil.PutConfig(j);
	
	alert("Dig up " + digupSongsList.length + " songs.");
	
	btnDigupSong.disabled = false;
});

// 曲を上に移動ダイアログ表示
function ShowDigupDialog() {
	html=`\
<div id="dlgShowDigup" style="position: fixed; inset: 0; margin: auto; width:400px; height:min-content; background-color:white; padding:1em; line-height:2em;">
	Keyword: <input id="txtKeyword" type="text" style="width:300px;"><br>
	<label style="background-color:lightgreen;"><input id="chkUnlistedOnly" type="checkbox" checked>Non-Playlisted Only</label><br>
	<button id="btnDigupOk">Ok</button>　
	<button id="btnDigupCancel">Cancel</button>
</div>`;
	document.body.insertAdjacentHTML("beforeend", html);
	
	var p = new Promise(resolve=>{
		document.querySelector("#btnDigupOk").addEventListener("click", async function() {
			resolve({
				keyword: document.querySelector("#txtKeyword").value,
				isUnlistedOnly: document.querySelector("#chkUnlistedOnly").checked
			});
			document.querySelector("#dlgShowDigup").remove();
		});
		document.querySelector("#btnDigupCancel").addEventListener("click", async function() {
			resolve(null);
			document.querySelector("#dlgShowDigup").remove();
		});
	});
	
	return p;
};



//Unlisted to Playlist ・未プレイリスト曲をプレイリストに追加する
//取得api
//playlist = await ウインドウが閉じられるまで
//if (playlist == null) { return; }
//playlist追加
//更新api

