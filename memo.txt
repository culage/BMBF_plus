■todo
BMBF_1_15_Ext
PCのBMBF画面の右パネルで上のほうに「未プレイリスト曲」を持ってくる
*	・Dig up Song
*		keyword: [          ]
*		[*] Not included in playlist　※緑色にする
*		
*		Dig up Unlisted	・未プレイリスト曲を上に持ってくる
*			（分かりやすい区切りとなる曲を指定してそれも上にもってくる？
*		Dig up by text ・タイトル・作者フィルタで上に持ってくる
*	・Unlisted to Playlist ・未プレイリスト曲をプレイリストに追加する
*	・Select to Playlist ・選択した曲　　　をプレイリストに追加する
*	・プレイリストに無い曲には色をつける　※緑色にする
-	・上にサーバ起動しっぱなしのトグルがあることを書く
	
*	chrome拡張にする
*	http://192.168.2.104:50000/main/playlists
	
	readme.mdを追加
	readme.en.mdを追加
	
	git push
	リリース
	
	discord BMBFch 報告
	2ch報告


曲バックアップスクリプト
	CollectNewSongを作る
		*フォルダ構成確認
		*書き換えてBMBFとBeatSaberが変更されること
		*	playlist_folderのみ
		*	config.json
	
	プレイリストに入ってない曲は「UnListedSong」に入っているかのように処理する
	
	コミットする
	
	プレイリストの形式を新しくする
	
	Player.datの新形式でスコアが取れるか確認
	
	アップロード
	BMBF1.15のConfig.jsonを使うのでModと状態が完全に一致するとは限りません
	（例えばゲーム内で追加した曲は無いなど）
	
	CollectNewSong
		# knownsongsをリストにする
		# playlistを取り除く
		# 残ったプレイリストに存在しない曲を、指定したプレイリストに追加する
		$j = Get-Content -Encoding UTF8 .\config.json | ConvertFrom-Json

		$playlist_songs_hash = $j.Playlists.SongList.Hash
		$known_songs = $j.KnownSongs.psobject.properties.name | %{ $j.KnownSongs.$_ }
		$unlist_songs = $known_songs | ?{ -not ($playlist_songs_hash -contains $_.Hash) }

		$p = Get-Content -Encoding UTF8 .\NewSong1637584055378_BMBF.json | ConvertFrom-Json
		$p.songs += $unlist_songs | Select-Object Hash, Songname

		$p | ConvertTo-Json -Compress | Set-Content -Encoding UTF8 .\added_playlist.json





■BMBF_1_15_Ext
◆めも
	[...document.querySelectorAll("li[data-song_hash]")].map(el=>el.dataset.song_hash)

	el = document.querySelector("li[data-song_hash]")
	[...document.querySelectorAll("li[data-song_hash]")]
	  .filter(el=>el.dataset.song_hash != "080D1C68AD1FE5758F8386716FF90721D919C3BF")
	  .forEach(el=>el.style.height="5px");

	document.querySelector("li[data-song_hash]").style.display="none"

	document.querySelector("cdk-virtual-scroll-viewport").style.height = "10000px"; //"calc(100% - 110px)"

	document.querySelectorAll("li[data-song_hash]")
	document.querySelector("li[data-song_hash] span.title")


◆テストコード
Configの更新
	// 取得
	(async () => {
	  url = "http://192.168.2.104:50000/host/beatsaber/config";
	  const response = await fetch(url, {
	    method: 'GET', // *GET, POST, PUT, DELETE, etc.
	    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
	  });
	  window.j = await response.json();
	})()

	// 1,2曲目入れ替え
	knownSongsList = Object.entries(j.Config.KnownSongs);
	x = knownSongsList.splice(1, 1);
	knownSongsList.splice(0, 0, ...x);
	j.Config.KnownSongs = Object.fromEntries(knownSongsList)

	// サーバ反映
	(async () => {
	  url = "http://192.168.2.104:50000/host/beatsaber/config";
	  const response = await fetch(url, {
	    method: 'PUT', // *GET, POST, PUT, DELETE, etc.
	    headers: {
	      'Content-Type': 'application/json'
	    },
	    body: JSON.stringify(window.j.Config)
	  });
	  window.pres = response;
	  console.log(response);
	})();


チェックされたハッシュ値を取得
	checkedHash = new Set();
	allHash = [];
	
	(async () => {
	  url = "http://192.168.2.104:50000/host/beatsaber/config";
	  const response = await fetch(url, {
	    method: 'GET', // *GET, POST, PUT, DELETE, etc.
	    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
	  });
	  const json = await response.json();
	  window.allHash = Object.entries(json.Config.KnownSongs).map(i => i[1].Hash);
	})()

	setInterval(()=>{
		if (document.querySelector("input.mat-checkbox-input") == null) { return; }
		document.querySelectorAll("li[data-song_hash]").forEach(el => {
			var hash = el.dataset.song_hash;
			if (el.querySelector("input.mat-checkbox-input").checked) {
				checkedHash.add(hash);
			} else {
				checkedHash.delete(hash);
			}
		});
	}, 500);

	document.querySelector("i.material-icons[mattooltip*='Select all']").addEventListener("click", ()=>{
		if (document.querySelector("input.mat-checkbox-input").checked) {
			allHash.forEach(i => checkedHash.add(i));
		} else {
			checkedHash.clear();
		}
	});



とりあえず中央表示やってみる
	html=`<div style="position: fixed; inset: 0; margin: auto; width:200px; height:200px; background-color:white;">test</div>`;
	document.body.insertAdjacentHTML("beforeend", html);

